1. Basic Authentication
- 사용자 이름 / 비밀번호를 Base64로 인코딩하여 Authorization 헤더에 포함하여 전송
- 매우 안전하지 않음, SSL/TLS와 함께 사용됨

* 헤더에 표시될 때
Authorization: Basic~~~

2. Bearer Token Authentication  (**이 프로젝트에서 활용할 방법**)
- 헤더에 토큰을 포함하여 전송, Authorization 헤더에 포함하여 전송
- JWT 사용하여 인증
- 간단한 방식, 상태유지 X, 확장성 높음
- 토큰 노출 위험이 있으며, 토큰 관리가 힘들다

* 헤더에 표시될 때
Authorization: Bearer~~~

3.OAuth
- 토큰기반 인증 방식
- 사용자가 미리 인증 받아 토큰을 발급 받고 이 토큰을 이용하여 API를 요청하는 방식
  (사용자가 직접 자격을 증명 X)


================================================================================

JWT(Json Web Token) 
: 클레임이라고 불리는 정보를 JSON 형태로 안전하게 전송하기 위한 토큰 기반의 표준
- 인증과 정보 교환에 사용, 서명이 돼있어서 신뢰성 확보 가능

1. Header : 토큰의 타입과 사용된 알고리즘 정보를 담고있음, Base64Url로 인코딩

2. Payload : 클레임 정보(대상, 발행자, 만료 시간 등 다양한 정보가 포함됨), Base64url로 인코딩

3. Signature : Header와 Payload, Secret key(비밀키)를 사용하여 생성된 서명

<장점>
- 상태유지 X 
- 간단하고 자기포함적(자신이 필요한 모든정보를 자체적으로 다 가지고있음)
- 확장성이 높음 

<단점>
- 크기 : 클레임정보가 많을수록 토큰의 크기가 커짐
- 보안 : 서명은 되어있으나 암호화는 돼있지 않아 중요 정보를 JWT에 포함해선 안된다.
- 토큰 관리 : 만료 시간, 갱신